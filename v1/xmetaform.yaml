metaform:
  version: "0.2.0"

variables:
  aws_region: "us-west-2"
  vpc_cidr: "10.0.0.0/16"
  subnet_1_cidr: "10.0.1.0/24"
  subnet_2_cidr: "10.0.2.0/24"
  eks_cluster_name: "example-eks-cluster"
  eks_node_instance_type: "t3.medium"

# AWS Infrastructure
provider:
  aws:
    region: {var.aws_region}

resources:

  # VPC
  aws_vpc:
    main_vpc:
      cidr_block: {var.vpc_cidr}

  # Subnets
  aws_subnet:
    subnet_1:
      vpc_id: {aws_vpc.main_vpc.id}
      cidr_block: {var.subnet_1_cidr}
      availability_zone: {var.aws_region}a

    subnet_2:
      vpc_id: {aws_vpc.main_vpc.id}
      cidr_block: {var.subnet_2_cidr}
      availability_zone: {var.aws_region}b

  # Internet Gateway and Route Table
  aws_internet_gateway:
    igw:
      vpc_id: {aws_vpc.main_vpc.id}

  aws_route_table:
    public:
      vpc_id: {aws_vpc.main_vpc.id}
      route:
        - cidr_block: "0.0.0.0/0"
          gateway_id: {aws_internet_gateway.igw.id}

  # Route Table Associations
  aws_route_table_association:
    subnet_1_assoc:
      subnet_id: {aws_subnet.subnet_1.id}
      route_table_id: {aws_route_table.public.id}

    subnet_2_assoc:
      subnet_id: {aws_subnet.subnet_2.id}
      route_table_id: {aws_route_table.public.id}

  # Security Group
  aws_security_group:
    eks_sg:
      vpc_id: {aws_vpc.main_vpc.id}
      ingress:
        - from_port: 0
          to_port: 0
          protocol: "-1"
          cidr_blocks: ["0.0.0.0/0"]
      egress:
        - from_port: 0
          to_port: 0
          protocol: "-1"
          cidr_blocks: ["0.0.0.0/0"]

  # IAM Roles for EKS
  aws_iam_role:
    eks_role:
      assume_role_policy: |
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "eks.amazonaws.com"
              }
            }
          ]
        }

    eks_node_role:
      assume_role_policy: |
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ec2.amazonaws.com"
              }
            ]
          ]
        }

  aws_iam_role_policy_attachment:
    eks_role_policy:
      role: {aws_iam_role.eks_role.name}
      policy_arn: "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"

    eks_node_policy:
      role: {aws_iam_role.eks_node_role.name}
      policy_arn: "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"

  # EKS Cluster
  aws_eks_cluster:
    main:
      name: {var.eks_cluster_name}
      role_arn: {aws_iam_role.eks_role.arn}
      vpc_config:
        subnet_ids: [{aws_subnet.subnet_1.id}, {aws_subnet.subnet_2.id}]
        security_group_ids: [{aws_security_group.eks_sg.id}]

  aws_eks_node_group:
    node_group:
      cluster_name: {aws_eks_cluster.main.name}
      node_role_arn: {aws_iam_role.eks_node_role.arn}
      subnet_ids: [{aws_subnet.subnet_1.id}, {aws_subnet.subnet_2.id}]
      instance_types: [{var.eks_node_instance_type}]
      desired_capacity: 2
      max_size: 3
      min_size: 1
